<template>
  <view id="heart-state-viewer" class="canvas-page-wrapper">
    <view class="report-title">{{ currentChart }}报告</view>
    <canvas canvas-id="heart-state-chart" style="width: {{ canvasWidth }}px; height: {{ canvasHeight }}px"></canvas>
    <scroll-view class="md-list" scroll-y>
      <view class="section report-switcher">
        <text class="title">报告选择</text>
        <daterangepicker :value.sync="dateRange" @change.user="dateRangeChanged"></daterangepicker>
        <button class="switch-chart" @tap="switchReport">切换至{{ currentChart === '心率' ? '血压' : '心率' }}报告</button>
      </view>
      <view class="section" wx:if="{{ currentChart === '血压' }}">
        <text class="title">摘要</text>
        <mdiconitem>
          <image slot="icon" src="{{ summary.systolic.max.warning }}"></image>
          <text slot="caption">最高收缩压</text>
          <text slot="left">{{ summary.systolic.max.systolic }}mmHg</text>
          <text slot="right">{{ summary.systolic.max.dateValue }}</text>
        </mdiconitem>
        <mdiconitem>
          <image slot="icon" src="{{ summary.systolic.average.warning }}"></image>
          <text slot="caption">平均收缩压</text>
          <text slot="left">{{ summary.systolic.average.systolic }}mmHg</text>
        </mdiconitem>
        <mdiconitem>
          <image slot="icon" src="{{ summary.diastolic.max.warning }}"></image>
          <text slot="caption">最高舒张压</text>
          <text slot="left">{{ summary.diastolic.max.diastolic }}mmHg</text>
          <text slot="right">{{ summary.diastolic.max.dateValue }}</text>
        </mdiconitem>
        <mdiconitem>
          <image slot="icon" src="{{ summary.diastolic.average.warning }}"></image>
          <text slot="caption">平均舒张压</text>
          <text slot="left">{{ summary.diastolic.average.diastolic }}mmHg</text>
        </mdiconitem>
        <mdiconitem>
          <text slot="caption">达标率</text>
          <text slot="left">{{ summary.bloodPresure.rate }}%</text>
          <text slot="right">{{ summary.bloodPresure.regular }} / {{ heartStateData.length }}</text>
        </mdiconitem>
      </view>
      <view class="section" wx:if="{{ currentChart === '心率' }}">
        <text class="title">摘要</text>
        <mdiconitem>
          <text slot="caption">最高心率</text>
          <text slot="left">{{ summary.heartRate.max.heartRate }}bpm</text>
          <text slot="right">{{ summary.heartRate.max.dateValue }}</text>
        </mdiconitem>
        <mdiconitem>
          <text slot="caption">最低心率</text>
          <text slot="left">{{ summary.heartRate.min.heartRate }}bpm</text>
          <text slot="right">{{ summary.heartRate.min.dateValue }}</text>
        </mdiconitem>
        <mdiconitem>
          <text slot="caption">平均心率</text>
          <text slot="left">{{ summary.heartRate.average }}bpm</text>
        </mdiconitem>
      </view>
      <view class="section">
        <text class="title">详细信息</text>
        <repeat for="{{ heartStateData }}" key="{{ index }}">
          <mdiconitem>
            <image slot="icon" src="{{ item.warning }}"></image>
            <text slot="caption">{{ item.dateValue }}</text>
            <text slot="left">{{ item.systolic }}mmHg / {{ item.diastolic }}mmHg, {{ item.heartRate }}bpm</text>
          </mdiconitem>
        </repeat>
      </view>
    </scroll-view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Chart from '../lib/chart'
  import mdiconitem from '../components/md-icon-item'
  import mdlistitem from '../components/md-list-item'
  import { formatDate } from '../lib/util'
  import { timeFormat } from 'd3-time-format'
  import daterangepicker from '../components/date-range-picker'

  import * as d3Array from 'd3-array'

  const WARNING_ICON = '../assets/icons/warning.svg'

  export default class HeartStateViewer extends wepy.component {
    components = {
      mdiconitem,
      mdlistitem,
      daterangepicker
    }

    data = {
      heartStateData: [],
      canvasWidth: 0,
      canvasHeight: 0,
      currentChart: '血压',
      dateRange: {
        from: formatDate(new Date() - 7 * 24 * 60 * 60 * 1000),
        to: formatDate()
      },
      summary: {
        systolic: {
          max: { systolic: 0, dateValue: '', warning: '' },
          average: { systolic: 0, warning: '' }
        },
        diastolic: {
          max: { diastolic: 0, dateValue: '' },
          average: { diastolic: 0, warning: '' }
        },
        bloodPresure: {
          regular: 0,
          rate: 0
        },
        heartRate: {
          max: { heartRate: 0, dateValue: '' },
          min: { heartRate: 0, dateValue: '' },
          average: 0
        }
      }
    }

    methods = {
      switchReport () {
        if (this.currentChart === '血压') this.currentChart = '心率'
        else this.currentChart = '血压'

        this.refresh()
      },
      dateRangeChanged (newRange) {
        this.dateRange = newRange
      }
    }

    onLoad () {
      const ctx = wx.createCanvasContext('heart-state-chart')
      this.heartRateChart = new Chart(ctx, [], d => d.date, d => d.heartRate)
      this.systolicChart = new Chart(ctx, [], d => d.date, d => d.systolic)
      this.diastolicChart = new Chart(ctx, [], d => d.date, d => d.diastolic)

      this.fetchHeartStateData()

      this.canvasWidth = this.heartRateChart.rect.width
      this.canvasHeight = this.heartRateChart.rect.height
    }

    fetchHeartStateData () {
      // TODO: 请求后端数据
      this.heartStateData = [
        { date: new Date(2017, 5, 16), heartRate: 80, systolic: 140, diastolic: 90 },
        { date: new Date(2017, 5, 15), heartRate: 83, systolic: 144, diastolic: 88 },
        { date: new Date(2017, 5, 14), heartRate: 79, systolic: 143, diastolic: 93 },
        { date: new Date(2017, 5, 13), heartRate: 85, systolic: 148, diastolic: 94 },
        { date: new Date(2017, 5, 12), heartRate: 82, systolic: 138, diastolic: 88 },
        { date: new Date(2017, 5, 11), heartRate: 89, systolic: 137, diastolic: 88 },
        { date: new Date(2017, 5, 10), heartRate: 88, systolic: 141, diastolic: 89 }
      ]

      this.heartRateChart.setData(this.heartStateData)

      // 手动计算血压图表的定义域
      const bloodPresureDomain = [d3Array.min(this.heartStateData, d => d.diastolic), d3Array.max(this.heartStateData, d => d.systolic)]
      this.systolicChart.setData(this.heartStateData, false)
      this.systolicChart.updateXScale()
      this.systolicChart.updateYScale(bloodPresureDomain)

      this.diastolicChart.setData(this.heartStateData, false)
      this.diastolicChart.updateXScale()
      this.diastolicChart.updateYScale(bloodPresureDomain)

      // 生成摘要信息
      this.generateSummary()

      this.$apply()
    }

    generateSummary () {
      let systolicMax = 0, systolicSum = 0
      let diastolicMax = 0, diastolicSum = 0
      let regularBloodPresure = 0
      let heartRateMax = 0, heartRateMin = 0, heartRateSum = 0

      const data = this.heartStateData
      data.forEach((item, index) => {
        if (item.systolic > data[systolicMax].systolic) systolicMax = index
        if (item.diastolic > data[diastolicMax].diastolic) diastolicMax = index
        if (item.heartRate > data[heartRateMax].heartRate) heartRateMax = index
        if (item.heartRate < data[heartRateMin].heartRate) heartRateMin = index

        systolicSum += item.systolic
        diastolicSum += item.diastolic
        heartRateSum += item.heartRate

        item.dateValue = formatDate(item.date)
        if (item.systolic > 140 || item.diastolic > 90) {
          item.warning = WARNING_ICON
        } else {
          regularBloodPresure += 1
        }
      })

      const systolicAverage = Math.round(systolicSum / data.length)
      const diastolicAverage = Math.round(diastolicSum / data.length)

      this.summary = {
        systolic: {
          max: data[systolicMax],
          average: {
            systolic: systolicAverage,
            warning: systolicAverage > 140 ? WARNING_ICON : ''
          }
        },
        diastolic: {
          max: data[diastolicMax],
          average: {
            diastolic: diastolicAverage,
            warning: diastolicAverage > 90 ? WARNING_ICON : ''
          }
        },
        bloodPresure: {
          regular: regularBloodPresure,
          rate: Math.round(regularBloodPresure / data.length * 10000) / 100
        },
        heartRate: {
          max: data[heartRateMax],
          min: data[heartRateMin],
          average: Math.round(heartRateSum / data.length)
        }
      }
    }

    refresh () {
      // 三个图表使用同一个 canvas, 所以清除其中任意一个都可以清除整个 canvas
      this.heartRateChart.clear()

      if (this.currentChart === '血压') {
        this.systolicChart.drawAxisBottom(timeFormat('%m/%d'))
        this.systolicChart.drawAxisLeft()
        this.systolicChart.drawDataLine()
        this.systolicChart.draw()

        this.diastolicChart.drawDataLine()
        this.diastolicChart.draw()
      } else if (this.currentChart === '心率') {
        this.heartRateChart.drawAxisBottom(timeFormat('%m/%d'))
        this.heartRateChart.drawDataLine()
        this.heartRateChart.drawLinearRegression()
        this.heartRateChart.drawAxisLeft()
        this.heartRateChart.draw()
      }
    }
  }
</script>

<style lang="scss">
  @import '../assets/styles/variables';

  #heart-state-viewer {
    .report-title {
      margin-bottom: 16px;
      text-align: center;
    }

    .switch-chart {
      @include button-reset;
      margin-top: 12px;
      padding: 12px 0;
      color: $primary;

      &.button-hover {
        background-color: $dark-white;
      }
    }

    .report-switcher {
      padding-bottom: 4px;
    }
  }
</style>
