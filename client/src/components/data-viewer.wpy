<template>
  <view id="data-viewer">
    <view class="scrollable-tabs-container">
      <view class="title-shadow"></view>
      <view class="tabs">
        <view wx:for="{{ tabs }}" wx:key="unique" data-index="{{ index }}" @tap="handlerTabTap" class="tab {{ activeTab === index ? 'active' : '' }}" style="width: {{ stv.windowWidth / tabs.length }}px">{{item}}</view>
        <view class="line {{ !stv.tStart ? 'with-animate' : '' }}" style="width: {{ stv.lineWidth }}px; left: {{ stv.offset / tabs.length }}px"></view>
      </view>
      <view class="content">
        <view class="page-wrapper {{ !stv.tStart ? 'with-animate': '' }}" style="left: -{{ stv.offset }}px" @touchstart="handlerStart" @touchmove.stop="handlerMove" @touchcancel="handlerEnd" @touchend="handlerEnd">
          <view class="page" style="width: {{ stv.windowWidth }}px">
            page1
          </view>
          <view class="page" style="width: {{ stv.windowWidth }}px">
            page2
          </view>
        </view>
      </view>
    </view>
    <addbutton></addbutton>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import addbutton from './add-button'

  export default class DataViewer extends wepy.component {
    components = {
      addbutton
    }

    data = {
      tabs: ['体重', '血压心率'],
      stv: {
        windowWidth: 0,
        lineWidth: 0,
        offset: 0,
        tStart: false
      },
      activeTab: 0
    }

    onLoad () {
      const res = wx.getSystemInfoSync()
      this.windowWidth = res.windowWidth
      this.stv.lineWidth = this.windowWidth / this.tabs.length
      this.stv.windowWidth = res.windowWidth
      this.stv = this.data.stv
    }

    methods = {
      handlerStart (e) {
        const { clientX, clientY } = e.touches[0]
        this.startX = clientX
        this.tapStartX = clientX
        this.tapStartY = clientY
        this.tapStartTime = e.timeStamp

        this.stv.tStart = true
      },

      handlerMove (e) {
        const { clientX } = e.touches[0]
        const offsetX = this.startX - clientX

        this.startX = clientX
        this.stv.offset += offsetX

        if (this.stv.offset <= 0) {
          this.stv.offset = 0
        } else if (this.stv.offset >= this.stv.windowWidth * (this.tabs.length - 1)) {
          this.stv.offset = this.stv.windowWidth * (this.tabs.length - 1)
        }

        const page = Math.round(this.stv.offset / this.stv.windowWidth)
        if (this.activeTab !== page) {
          this.activeTab = page
        }
      },

      handlerEnd (e) {
        const endTime = e.timeStamp
        const { clientX, clientY } = e.changedTouches[0]
        const { offset, windowWidth } = this.stv
        this.stv.tStart = false

        // 快速滑动则直接切换页面
        if (endTime - this.tapStartTime <= 300 && Math.abs(this.tapStartY - clientY) < 50) {
          if (this.tapStartX - clientX > 5 && this.activeTab < this.tabs.length - 1) {
            this.activeTab += 1
          } else if (this.activeTab > 0) {
            this.activeTab -= 1
          }

          this.stv.offset = this.stv.windowWidth * this.activeTab
          return
        }

        // 否则将页面位置重置
        const page = Math.round(offset / windowWidth)
        if (this.activeTab !== page) {
          this.activeTab = page
        }

        this.stv.offset = this.stv.windowWidth * page
      },

      handlerTabTap (e) {
        const page = e.currentTarget.dataset.index
        this.activeTab = page
        this.stv.offset = this.stv.windowWidth * this.activeTab
      }
    }
  }
</script>

<style lang="scss">
  @import '../assets/styles/variables';

  #data-viewer .title-shadow {
    z-index: 1;
  }

  .scrollable-tabs-container {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;

    .with-animate {
      transition: left $transition;
      transform: translateZ(0);
    }

    .tabs {
      position: relative;
      z-index: 2;
      display: flex;
      flex: none;
      color: $tab-label-color;
      background-color: $primary;

      .tab {
        padding-bottom: $tabs-line-width;
        display: flex;
        align-items: center;
        justify-content: center;

        &.active {
          color: $tab-label-color-active;
        }
      }

      .line {
        position: absolute;
        bottom: 0;
        height: $tabs-line-width;
        background-color: $tab-label-color-active;
      }
    }

    .content {
      position: relative;
      z-index: 0;
      flex: 1;

      .page-wrapper {
        position: absolute;
        top: 0;
        bottom: 0;
        display: flex;
      }
    }
  }
</style>
